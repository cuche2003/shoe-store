/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.servicebuilder.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.servicebuilder.model.Shoe;
import com.liferay.servicebuilder.model.ShoeModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Shoe service. Represents a row in the &quot;ShoeServiceBuilder_Shoe&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ShoeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ShoeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ShoeImpl
 * @generated
 */
@JSON(strict = true)
public class ShoeModelImpl extends BaseModelImpl<Shoe> implements ShoeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a shoe model instance should use the <code>Shoe</code> interface instead.
	 */
	public static final String TABLE_NAME = "ShoeServiceBuilder_Shoe";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"shoeId", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"brandId", Types.VARCHAR}, {"typeId", Types.VARCHAR},
		{"shoeModel", Types.VARCHAR}, {"gender", Types.VARCHAR},
		{"size_", Types.DOUBLE}, {"price", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shoeId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("brandId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("typeId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shoeModel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("size_", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("price", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ShoeServiceBuilder_Shoe (uuid_ VARCHAR(75) null,shoeId VARCHAR(75) not null primary key,createDate DATE null,modifiedDate DATE null,brandId VARCHAR(75) null,typeId VARCHAR(75) null,shoeModel VARCHAR(75) null,gender VARCHAR(75) null,size_ DOUBLE,price DOUBLE)";

	public static final String TABLE_SQL_DROP =
		"drop table ShoeServiceBuilder_Shoe";

	public static final String ORDER_BY_JPQL = " ORDER BY shoe.shoeId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ShoeServiceBuilder_Shoe.shoeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SHOEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ShoeModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _shoeId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setShoeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _shoeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Shoe.class;
	}

	@Override
	public String getModelClassName() {
		return Shoe.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Shoe, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Shoe, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Shoe, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Shoe)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Shoe, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Shoe, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Shoe)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Shoe, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Shoe, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Shoe, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Shoe, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Shoe, Object>>();

			attributeGetterFunctions.put("uuid", Shoe::getUuid);
			attributeGetterFunctions.put("shoeId", Shoe::getShoeId);
			attributeGetterFunctions.put("createDate", Shoe::getCreateDate);
			attributeGetterFunctions.put("modifiedDate", Shoe::getModifiedDate);
			attributeGetterFunctions.put("brandId", Shoe::getBrandId);
			attributeGetterFunctions.put("typeId", Shoe::getTypeId);
			attributeGetterFunctions.put("shoeModel", Shoe::getShoeModel);
			attributeGetterFunctions.put("gender", Shoe::getGender);
			attributeGetterFunctions.put("size", Shoe::getSize);
			attributeGetterFunctions.put("price", Shoe::getPrice);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Shoe, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Shoe, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Shoe, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Shoe, String>)Shoe::setUuid);
			attributeSetterBiConsumers.put(
				"shoeId", (BiConsumer<Shoe, String>)Shoe::setShoeId);
			attributeSetterBiConsumers.put(
				"createDate", (BiConsumer<Shoe, Date>)Shoe::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate", (BiConsumer<Shoe, Date>)Shoe::setModifiedDate);
			attributeSetterBiConsumers.put(
				"brandId", (BiConsumer<Shoe, String>)Shoe::setBrandId);
			attributeSetterBiConsumers.put(
				"typeId", (BiConsumer<Shoe, String>)Shoe::setTypeId);
			attributeSetterBiConsumers.put(
				"shoeModel", (BiConsumer<Shoe, String>)Shoe::setShoeModel);
			attributeSetterBiConsumers.put(
				"gender", (BiConsumer<Shoe, String>)Shoe::setGender);
			attributeSetterBiConsumers.put(
				"size", (BiConsumer<Shoe, Double>)Shoe::setSize);
			attributeSetterBiConsumers.put(
				"price", (BiConsumer<Shoe, Double>)Shoe::setPrice);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public String getShoeId() {
		if (_shoeId == null) {
			return "";
		}
		else {
			return _shoeId;
		}
	}

	@Override
	public void setShoeId(String shoeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shoeId = shoeId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getBrandId() {
		if (_brandId == null) {
			return "";
		}
		else {
			return _brandId;
		}
	}

	@Override
	public void setBrandId(String brandId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_brandId = brandId;
	}

	@JSON
	@Override
	public String getTypeId() {
		if (_typeId == null) {
			return "";
		}
		else {
			return _typeId;
		}
	}

	@Override
	public void setTypeId(String typeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_typeId = typeId;
	}

	@JSON
	@Override
	public String getShoeModel() {
		if (_shoeModel == null) {
			return "";
		}
		else {
			return _shoeModel;
		}
	}

	@Override
	public void setShoeModel(String shoeModel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shoeModel = shoeModel;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public double getSize() {
		return _size;
	}

	@Override
	public void setSize(double size) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_size = size;
	}

	@JSON
	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_price = price;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Shoe toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Shoe>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ShoeImpl shoeImpl = new ShoeImpl();

		shoeImpl.setUuid(getUuid());
		shoeImpl.setShoeId(getShoeId());
		shoeImpl.setCreateDate(getCreateDate());
		shoeImpl.setModifiedDate(getModifiedDate());
		shoeImpl.setBrandId(getBrandId());
		shoeImpl.setTypeId(getTypeId());
		shoeImpl.setShoeModel(getShoeModel());
		shoeImpl.setGender(getGender());
		shoeImpl.setSize(getSize());
		shoeImpl.setPrice(getPrice());

		shoeImpl.resetOriginalValues();

		return shoeImpl;
	}

	@Override
	public Shoe cloneWithOriginalValues() {
		ShoeImpl shoeImpl = new ShoeImpl();

		shoeImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		shoeImpl.setShoeId(this.<String>getColumnOriginalValue("shoeId"));
		shoeImpl.setCreateDate(this.<Date>getColumnOriginalValue("createDate"));
		shoeImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		shoeImpl.setBrandId(this.<String>getColumnOriginalValue("brandId"));
		shoeImpl.setTypeId(this.<String>getColumnOriginalValue("typeId"));
		shoeImpl.setShoeModel(this.<String>getColumnOriginalValue("shoeModel"));
		shoeImpl.setGender(this.<String>getColumnOriginalValue("gender"));
		shoeImpl.setSize(this.<Double>getColumnOriginalValue("size_"));
		shoeImpl.setPrice(this.<Double>getColumnOriginalValue("price"));

		return shoeImpl;
	}

	@Override
	public int compareTo(Shoe shoe) {
		String primaryKey = shoe.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Shoe)) {
			return false;
		}

		Shoe shoe = (Shoe)object;

		String primaryKey = shoe.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Shoe> toCacheModel() {
		ShoeCacheModel shoeCacheModel = new ShoeCacheModel();

		shoeCacheModel.uuid = getUuid();

		String uuid = shoeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			shoeCacheModel.uuid = null;
		}

		shoeCacheModel.shoeId = getShoeId();

		String shoeId = shoeCacheModel.shoeId;

		if ((shoeId != null) && (shoeId.length() == 0)) {
			shoeCacheModel.shoeId = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			shoeCacheModel.createDate = createDate.getTime();
		}
		else {
			shoeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			shoeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			shoeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		shoeCacheModel.brandId = getBrandId();

		String brandId = shoeCacheModel.brandId;

		if ((brandId != null) && (brandId.length() == 0)) {
			shoeCacheModel.brandId = null;
		}

		shoeCacheModel.typeId = getTypeId();

		String typeId = shoeCacheModel.typeId;

		if ((typeId != null) && (typeId.length() == 0)) {
			shoeCacheModel.typeId = null;
		}

		shoeCacheModel.shoeModel = getShoeModel();

		String shoeModel = shoeCacheModel.shoeModel;

		if ((shoeModel != null) && (shoeModel.length() == 0)) {
			shoeCacheModel.shoeModel = null;
		}

		shoeCacheModel.gender = getGender();

		String gender = shoeCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			shoeCacheModel.gender = null;
		}

		shoeCacheModel.size = getSize();

		shoeCacheModel.price = getPrice();

		return shoeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Shoe, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Shoe, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Shoe, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Shoe)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Shoe>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Shoe.class, ModelWrapper.class);

	}

	private String _uuid;
	private String _shoeId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _brandId;
	private String _typeId;
	private String _shoeModel;
	private String _gender;
	private double _size;
	private double _price;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Shoe, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Shoe)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("shoeId", _shoeId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("brandId", _brandId);
		_columnOriginalValues.put("typeId", _typeId);
		_columnOriginalValues.put("shoeModel", _shoeModel);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("size_", _size);
		_columnOriginalValues.put("price", _price);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("size_", "size");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("shoeId", 2L);

		columnBitmasks.put("createDate", 4L);

		columnBitmasks.put("modifiedDate", 8L);

		columnBitmasks.put("brandId", 16L);

		columnBitmasks.put("typeId", 32L);

		columnBitmasks.put("shoeModel", 64L);

		columnBitmasks.put("gender", 128L);

		columnBitmasks.put("size_", 256L);

		columnBitmasks.put("price", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Shoe _escapedModel;

}